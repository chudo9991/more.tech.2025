"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏–Ω—Ç–µ—Ä–≤—å—é
"""
import os
import tempfile
import subprocess
from typing import List, Dict, Any, Optional
from pathlib import Path

from app.models import InterviewScenario, ScenarioNode, ScenarioTransition
from app.services.scenario_generation_service import ScenarioGenerationService


class ScenarioImageGenerator:
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏–Ω—Ç–µ—Ä–≤—å—é
    """
    
    def __init__(self, db_session=None):
        self.db_session = db_session
        self.scenario_service = ScenarioGenerationService(db_session) if db_session else None
    
    def generate_dot_code(self, scenario: InterviewScenario, nodes: List[ScenarioNode], transitions: List[ScenarioTransition]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç DOT –∫–æ–¥ –¥–ª—è Graphviz –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è
        """
        dot_lines = [
            "digraph scenario {",
            "    rankdir=TB;",
            "    node [shape=box, style=filled, fontname=\"Arial\", fontsize=10];",
            "    edge [fontname=\"Arial\", fontsize=8];",
            "",
            f"    // –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario.name}",
            ""
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã
        for node in nodes:
            node_id = self._sanitize_id(node.id)
            node_config = node.node_config or {}
            label = node_config.get("label", f"–£–∑–µ–ª {node.id}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å —É–∑–ª–∞
            if node.node_type == "start":
                dot_lines.append(f'    {node_id} [label="üé¨ {label}", fillcolor="#e1f5fe", color="#0277bd"];')
            elif node.node_type == "end":
                dot_lines.append(f'    {node_id} [label="üèÅ {label}", fillcolor="#f3e5f5", color="#7b1fa2"];')
            elif node.node_type == "question":
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≤—ã–∫–∞—Ö
                target_skills = node_config.get("target_skills", [])
                skills_text = ", ".join(target_skills[:2])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 –Ω–∞–≤—ã–∫–∞
                if len(target_skills) > 2:
                    skills_text += "..."
                
                weight = node_config.get("weight", 0.5)
                must_have = node_config.get("must_have", False)
                
                icon = "üî¥" if must_have else "üü°"
                color = "#ffebee" if must_have else "#fff3e0"
                border_color = "#c62828" if must_have else "#ef6c00"
                
                dot_lines.append(f'    {node_id} [label="\\n{icon} {label}\\nüí° {skills_text}\\n‚öñÔ∏è {weight}", fillcolor="{color}", color="{border_color}"];')
            else:
                dot_lines.append(f'    {node_id} [label="‚ùì {label}", fillcolor="#f5f5f5", color="#757575"];')
        
        dot_lines.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã
        if transitions:
            for transition in transitions:
                from_id = self._sanitize_id(transition.from_node_id)
                to_id = self._sanitize_id(transition.to_node_id)
                
                condition_type = transition.condition_type
                label = transition.transition_label or ""
                
                if condition_type == "always":
                    dot_lines.append(f"    {from_id} -> {to_id};")
                elif condition_type == "score_threshold":
                    condition_value = transition.condition_value or {}
                    min_score = condition_value.get("min_score", 0.7)
                    criterion = condition_value.get("criterion", "")
                    dot_lines.append(f'    {from_id} -> {to_id} [label="üìä ‚â•{min_score}"];')
                elif condition_type == "negative_response":
                    dot_lines.append(f'    {from_id} -> {to_id} [label="‚ùå –ù–µ—Ç"];')
                else:
                    dot_lines.append(f'    {from_id} -> {to_id} [label="{label}"];')
        else:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
            node_ids = []
            for node in nodes:
                node_id = self._sanitize_id(node.id)
                node_ids.append(node_id)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
            for i in range(len(node_ids) - 1):
                dot_lines.append(f"    {node_ids[i]} -> {node_ids[i+1]};")
        
        dot_lines.append("}")
        
        return "\n".join(dot_lines)
    
    def _sanitize_id(self, node_id: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç ID —É–∑–ª–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ DOT
        """
        return node_id.replace("-", "_").replace(" ", "_").replace(".", "_")
    
    def generate_image(self, scenario: InterviewScenario, nodes: List[ScenarioNode], transitions: List[ScenarioTransition], 
                      format: str = "png", output_path: Optional[str] = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
        
        Args:
            scenario: –°—Ü–µ–Ω–∞—Ä–∏–π –∏–Ω—Ç–µ—Ä–≤—å—é
            nodes: –£–∑–ª—ã —Å—Ü–µ–Ω–∞—Ä–∏—è
            transitions: –ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
            format: –§–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (png, svg, pdf)
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ None, —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª)
            
        Returns:
            –ü—É—Ç—å –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º DOT –∫–æ–¥
            dot_code = self.generate_dot_code(scenario, nodes, transitions)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π DOT —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(mode='w', suffix='.dot', delete=False) as dot_file:
                dot_file.write(dot_code)
                dot_file_path = dot_file.name
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if output_path is None:
                with tempfile.NamedTemporaryFile(suffix=f'.{format}', delete=False) as output_file:
                    output_path = output_file.name
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Graphviz
            cmd = ["dot", "-T", format, "-o", output_path, dot_file_path]
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π DOT —Ñ–∞–π–ª
            os.unlink(dot_file_path)
            
            if result.returncode != 0:
                raise Exception(f"Graphviz error: {result.stderr}")
            
            return output_path
            
        except subprocess.TimeoutExpired:
            raise Exception("Timeout generating image")
        except Exception as e:
            raise Exception(f"Error generating image: {str(e)}")
    
    def generate_scenario_image(self, scenario_id: str, format: str = "png", db_session=None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ ID
        
        Args:
            scenario_id: ID —Å—Ü–µ–Ω–∞—Ä–∏—è
            format: –§–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            db_session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            –ü—É—Ç—å –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        if not db_session:
            raise Exception("Database session is required")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
        scenario = db_session.query(InterviewScenario).filter(InterviewScenario.id == scenario_id).first()
        if not scenario:
            raise Exception(f"Scenario {scenario_id} not found")
        
        nodes = db_session.query(ScenarioNode).filter(ScenarioNode.scenario_id == scenario_id).all()
        transitions = db_session.query(ScenarioTransition).filter(ScenarioTransition.scenario_id == scenario_id).all()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        return self.generate_image(scenario, nodes, transitions, format)
    
    def get_image_as_bytes(self, scenario_id: str, format: str = "png", db_session=None) -> bytes:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –∫–∞–∫ bytes
        
        Args:
            scenario_id: ID —Å—Ü–µ–Ω–∞—Ä–∏—è
            format: –§–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            db_session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            –ë–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        image_path = self.generate_scenario_image(scenario_id, format, db_session)
        
        try:
            with open(image_path, 'rb') as f:
                return f.read()
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(image_path):
                os.unlink(image_path)
