version: '3.8'

services:
  # Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: interview_ai
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # MinIO
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin123}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  # MinIO Initialization
  minio-init:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin123}
    volumes:
      - ./scripts/init-minio.sh:/init-minio.sh
    command: ["/bin/sh", "/init-minio.sh"]
    restart: "no"

  # Orchestrator (FastAPI)
  orchestrator:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-your-username/more.tech.2025}/orchestrator:${TAG:-latest}
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-password}@db:5432/interview_ai
      AZURE_OPENAI_API_KEY: ${AZURE_OPENAI_API_KEY}
      AZURE_OPENAI_ENDPOINT: ${AZURE_OPENAI_ENDPOINT}
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin123}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-audio-files}
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # STT Service
  stt:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-your-username/more.tech.2025}/stt:${TAG:-latest}
    environment:
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin123}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-audio-files}
    ports:
      - "8001:8001"
    depends_on:
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    volumes:
      - whisper_cache:/root/.cache/whisper

  # LLM Service
  llm:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-your-username/more.tech.2025}/llm:${TAG:-latest}
    environment:
      AZURE_OPENAI_API_KEY: ${AZURE_OPENAI_API_KEY}
      AZURE_OPENAI_ENDPOINT: ${AZURE_OPENAI_ENDPOINT}
    ports:
      - "8004:8004"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Avatar Service
  avatar:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-your-username/more.tech.2025}/avatar:${TAG:-latest}
    ports:
      - "8005:8005"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Scoring Service
  scoring:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-your-username/more.tech.2025}/scoring:${TAG:-latest}
    environment:
      AZURE_OPENAI_API_KEY: ${AZURE_OPENAI_API_KEY}
      AZURE_OPENAI_ENDPOINT: ${AZURE_OPENAI_ENDPOINT}
    ports:
      - "8003:8003"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend (Nginx)
  frontend:
    image: ${REGISTRY:-ghcr.io}/${IMAGE_NAME:-your-username/more.tech.2025}/frontend:${TAG:-latest}
    ports:
      - "3000:3000"
    depends_on:
      - orchestrator
      - stt
      - llm
      - avatar
      - scoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
  minio_data:
  whisper_cache:
