#!/usr/bin/env node

const fs = require('fs')
const path = require('path')

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
function findFiles(dir, extensions, files = []) {
  const items = fs.readdirSync(dir)
  
  for (const item of items) {
    const fullPath = path.join(dir, item)
    const stat = fs.statSync(fullPath)
    
    if (stat.isDirectory()) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules, .git –∏ –¥—Ä—É–≥–∏–µ —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏
      if (!['node_modules', '.git', 'dist', 'build', '.nuxt', '.output'].includes(item)) {
        findFiles(fullPath, extensions, files)
      }
    } else if (stat.isFile()) {
      const ext = path.extname(item)
      if (extensions.includes(ext)) {
        files.push(fullPath)
      }
    }
  }
  
  return files
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å—Ç—É–ø–æ–≤
function fixIndentation(content) {
  const lines = content.split('\n')
  const fixedLines = []
  
  for (const line of lines) {
    // –ó–∞–º–µ–Ω—è–µ–º —Ç–∞–±—ã –Ω–∞ 2 –ø—Ä–æ–±–µ–ª–∞
    let fixedLine = line.replace(/\t/g, '  ')
    
    // –ó–∞–º–µ–Ω—è–µ–º 4 –ø—Ä–æ–±–µ–ª–∞ –Ω–∞ 2 –ø—Ä–æ–±–µ–ª–∞ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
    fixedLine = fixedLine.replace(/^( {4})+/g, (match) => {
      const spaceCount = match.length
      const newSpaceCount = (spaceCount / 4) * 2
      return ' '.repeat(newSpaceCount)
    })
    
    // –£–¥–∞–ª—è–µ–º trailing whitespace
    fixedLine = fixedLine.replace(/\s+$/, '')
    
    fixedLines.push(fixedLine)
  }
  
  return fixedLines.join('\n')
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  const srcDir = path.join(__dirname, 'src')
  const extensions = ['.vue', '.js', '.ts', '.css', '.scss', '.json']
  
  console.log('üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å—Ç—É–ø–æ–≤...')
  
  const files = findFiles(srcDir, extensions)
  
  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤`)
  
  let fixedCount = 0
  
  for (const file of files) {
    try {
      const content = fs.readFileSync(file, 'utf8')
      const fixedContent = fixIndentation(content)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç
      if (content !== fixedContent) {
        fs.writeFileSync(file, fixedContent, 'utf8')
        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${path.relative(__dirname, file)}`)
        fixedCount++
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${file}:`, error.message)
    }
  }
  
  console.log(`\nüéâ –ì–æ—Ç–æ–≤–æ! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedCount} —Ñ–∞–π–ª–æ–≤ –∏–∑ ${files.length}`)
  
  if (fixedCount === 0) {
    console.log('‚ú® –í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã!')
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main()
}

module.exports = { fixIndentation, findFiles }